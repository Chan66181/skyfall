from abc import ABC, abstractmethod
from shared import DroneTargetInfo, AttackResult
from hardware_handler import WifiCardHandler
from shared.enums.interface_mode import InterfaceMode


class BaseAttackScript(ABC):
    def __init__(self, target_info: DroneTargetInfo):
        self.target_info = target_info
        self._wifi = WifiCardHandler()


    def _ensure_interface_mode(self, required_mode: InterfaceMode) -> AttackResult:
        if not self.target_info.interface.bssid:
            return AttackResult(False, "", "", "Interface not set in DroneTargetInfo")

        ok, out, err, msg, updated_iface = self._wifi.ensure_mode_by_mac(
            mac=self.target_info.interface.bssid,
            required_mode=required_mode,
            use_sudo=self.target_info.use_sudo,
            channel=self.target_info.channel,
        )

        if ok:
            return AttackResult(True, out, err, msg)

        return AttackResult(False, out, err, msg)

    @abstractmethod
    def attack(self) -> AttackResult: ...
